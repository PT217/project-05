import { L as X, F as v, j as C, p as N, q as M, M as O, ay as R, az as S, N as q, e as B } from "./index-20e94914.mjs";
class G extends X {
  load(i, x, c, d) {
    const l = this, f = new v(l.manager);
    f.setPath(l.path), f.setResponseType("arraybuffer"), f.setRequestHeader(l.requestHeader), f.load(i, function(e) {
      try {
        x(l.parse(e));
      } catch (u) {
        d ? d(u) : console.error(u), l.manager.itemError(i);
      }
    }, c, d);
  }
  parse(i) {
    const x = new DataView(i), c = x.getUint32(0, !0), d = x.getUint32(4, !0);
    if (c !== 542658390 || d !== 150) {
      console.error("Not a valid VOX file");
      return;
    }
    const l = [
      0,
      4294967295,
      4291624959,
      4288282623,
      4284940287,
      4281597951,
      4278255615,
      4294954239,
      4291611903,
      4288269567,
      4284927231,
      4281584895,
      4278242559,
      4294941183,
      4291598847,
      4288256511,
      4284914175,
      4281571839,
      4278229503,
      4294928127,
      4291585791,
      4288243455,
      4284901119,
      4281558783,
      4278216447,
      4294915071,
      4291572735,
      4288230399,
      4284888063,
      4281545727,
      4278203391,
      4294902015,
      4291559679,
      4288217343,
      4284875007,
      4281532671,
      4278190335,
      4294967244,
      4291624908,
      4288282572,
      4284940236,
      4281597900,
      4278255564,
      4294954188,
      4291611852,
      4288269516,
      4284927180,
      4281584844,
      4278242508,
      4294941132,
      4291598796,
      4288256460,
      4284914124,
      4281571788,
      4278229452,
      4294928076,
      4291585740,
      4288243404,
      4284901068,
      4281558732,
      4278216396,
      4294915020,
      4291572684,
      4288230348,
      4284888012,
      4281545676,
      4278203340,
      4294901964,
      4291559628,
      4288217292,
      4284874956,
      4281532620,
      4278190284,
      4294967193,
      4291624857,
      4288282521,
      4284940185,
      4281597849,
      4278255513,
      4294954137,
      4291611801,
      4288269465,
      4284927129,
      4281584793,
      4278242457,
      4294941081,
      4291598745,
      4288256409,
      4284914073,
      4281571737,
      4278229401,
      4294928025,
      4291585689,
      4288243353,
      4284901017,
      4281558681,
      4278216345,
      4294914969,
      4291572633,
      4288230297,
      4284887961,
      4281545625,
      4278203289,
      4294901913,
      4291559577,
      4288217241,
      4284874905,
      4281532569,
      4278190233,
      4294967142,
      4291624806,
      4288282470,
      4284940134,
      4281597798,
      4278255462,
      4294954086,
      4291611750,
      4288269414,
      4284927078,
      4281584742,
      4278242406,
      4294941030,
      4291598694,
      4288256358,
      4284914022,
      4281571686,
      4278229350,
      4294927974,
      4291585638,
      4288243302,
      4284900966,
      4281558630,
      4278216294,
      4294914918,
      4291572582,
      4288230246,
      4284887910,
      4281545574,
      4278203238,
      4294901862,
      4291559526,
      4288217190,
      4284874854,
      4281532518,
      4278190182,
      4294967091,
      4291624755,
      4288282419,
      4284940083,
      4281597747,
      4278255411,
      4294954035,
      4291611699,
      4288269363,
      4284927027,
      4281584691,
      4278242355,
      4294940979,
      4291598643,
      4288256307,
      4284913971,
      4281571635,
      4278229299,
      4294927923,
      4291585587,
      4288243251,
      4284900915,
      4281558579,
      4278216243,
      4294914867,
      4291572531,
      4288230195,
      4284887859,
      4281545523,
      4278203187,
      4294901811,
      4291559475,
      4288217139,
      4284874803,
      4281532467,
      4278190131,
      4294967040,
      4291624704,
      4288282368,
      4284940032,
      4281597696,
      4278255360,
      4294953984,
      4291611648,
      4288269312,
      4284926976,
      4281584640,
      4278242304,
      4294940928,
      4291598592,
      4288256256,
      4284913920,
      4281571584,
      4278229248,
      4294927872,
      4291585536,
      4288243200,
      4284900864,
      4281558528,
      4278216192,
      4294914816,
      4291572480,
      4288230144,
      4284887808,
      4281545472,
      4278203136,
      4294901760,
      4291559424,
      4288217088,
      4284874752,
      4281532416,
      4278190318,
      4278190301,
      4278190267,
      4278190250,
      4278190216,
      4278190199,
      4278190165,
      4278190148,
      4278190114,
      4278190097,
      4278251008,
      4278246656,
      4278237952,
      4278233600,
      4278224896,
      4278220544,
      4278211840,
      4278207488,
      4278198784,
      4278194432,
      4293787648,
      4292673536,
      4290445312,
      4289331200,
      4287102976,
      4285988864,
      4283760640,
      4282646528,
      4280418304,
      4279304192,
      4293848814,
      4292730333,
      4290493371,
      4289374890,
      4287137928,
      4286019447,
      4283782485,
      4282664004,
      4280427042,
      4279308561
    ];
    let f = 8, e;
    const u = [];
    for (; f < x.byteLength; ) {
      let p = "";
      for (let s = 0; s < 4; s++)
        p += String.fromCharCode(x.getUint8(f++));
      const m = x.getUint32(f, !0);
      if (f += 4, f += 4, p === "SIZE") {
        const s = x.getUint32(f, !0);
        f += 4;
        const g = x.getUint32(f, !0);
        f += 4;
        const h = x.getUint32(f, !0);
        f += 4, e = {
          palette: l,
          size: { x: s, y: g, z: h }
        }, u.push(e), f += m - 3 * 4;
      } else if (p === "XYZI") {
        const s = x.getUint32(f, !0);
        f += 4, e.data = new Uint8Array(i, f, s * 4), f += s * 4;
      } else if (p === "RGBA") {
        const s = [0];
        for (let g = 0; g < 256; g++)
          s[g + 1] = x.getUint32(f, !0), f += 4;
        e.palette = s;
      } else
        f += m;
    }
    return u;
  }
}
class H extends C {
  constructor(i) {
    const x = i.data, c = i.size, d = i.palette, l = [], f = [], e = [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], u = [1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0], p = [0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1], m = [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], s = [0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0], g = [0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1];
    function h(t, n, o, a, w, A, y) {
      n -= c.x / 2, o -= c.z / 2, a += c.y / 2;
      for (let r = 0; r < 18; r += 3)
        l.push(t[r + 0] + n, t[r + 1] + o, t[r + 2] + a), f.push(w, A, y);
    }
    const F = c.x, L = c.x * c.y, z = new Uint8Array(c.x * c.y * c.z);
    for (let t = 0; t < x.length; t += 4) {
      const n = x[t + 0], o = x[t + 1], a = x[t + 2], w = n + o * F + a * L;
      z[w] = 255;
    }
    let D = !1;
    for (let t = 0; t < x.length; t += 4) {
      const n = x[t + 0], o = x[t + 1], a = x[t + 2], w = x[t + 3], A = d[w], y = (A >> 0 & 255) / 255, r = (A >> 8 & 255) / 255, b = (A >> 16 & 255) / 255;
      (y > 0 || r > 0 || b > 0) && (D = !0);
      const U = n + o * F + a * L;
      (z[U + 1] === 0 || n === c.x - 1) && h(u, n, a, -o, y, r, b), (z[U - 1] === 0 || n === 0) && h(e, n, a, -o, y, r, b), (z[U + F] === 0 || o === c.y - 1) && h(m, n, a, -o, y, r, b), (z[U - F] === 0 || o === 0) && h(p, n, a, -o, y, r, b), (z[U + L] === 0 || a === c.z - 1) && h(g, n, a, -o, y, r, b), (z[U - L] === 0 || a === 0) && h(s, n, a, -o, y, r, b);
    }
    const V = new N();
    V.setAttribute("position", new M(l, 3)), V.computeVertexNormals();
    const T = new O();
    D && (V.setAttribute("color", new M(f, 3)), T.vertexColors = !0), super(V, T);
  }
}
class I extends R {
  constructor(i) {
    const x = i.data, c = i.size, d = c.x, l = c.x * c.y, f = new Uint8Array(c.x * c.y * c.z);
    for (let e = 0; e < x.length; e += 4) {
      const u = x[e + 0], p = x[e + 1], m = x[e + 2], s = u + p * d + m * l;
      f[s] = 255;
    }
    super(f, c.x, c.y, c.z), this.format = S, this.minFilter = q, this.magFilter = B, this.unpackAlignment = 1, this.needsUpdate = !0;
  }
}
export {
  I as VOXData3DTexture,
  G as VOXLoader,
  H as VOXMesh
};
