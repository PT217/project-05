import { L as q, F as M, p as N, q as y, a1 as R, a3 as L } from "./index-20e94914.mjs";
const B = [
  [-0.525731, 0, 0.850651],
  [-0.442863, 0.238856, 0.864188],
  [-0.295242, 0, 0.955423],
  [-0.309017, 0.5, 0.809017],
  [-0.16246, 0.262866, 0.951056],
  [0, 0, 1],
  [0, 0.850651, 0.525731],
  [-0.147621, 0.716567, 0.681718],
  [0.147621, 0.716567, 0.681718],
  [0, 0.525731, 0.850651],
  [0.309017, 0.5, 0.809017],
  [0.525731, 0, 0.850651],
  [0.295242, 0, 0.955423],
  [0.442863, 0.238856, 0.864188],
  [0.16246, 0.262866, 0.951056],
  [-0.681718, 0.147621, 0.716567],
  [-0.809017, 0.309017, 0.5],
  [-0.587785, 0.425325, 0.688191],
  [-0.850651, 0.525731, 0],
  [-0.864188, 0.442863, 0.238856],
  [-0.716567, 0.681718, 0.147621],
  [-0.688191, 0.587785, 0.425325],
  [-0.5, 0.809017, 0.309017],
  [-0.238856, 0.864188, 0.442863],
  [-0.425325, 0.688191, 0.587785],
  [-0.716567, 0.681718, -0.147621],
  [-0.5, 0.809017, -0.309017],
  [-0.525731, 0.850651, 0],
  [0, 0.850651, -0.525731],
  [-0.238856, 0.864188, -0.442863],
  [0, 0.955423, -0.295242],
  [-0.262866, 0.951056, -0.16246],
  [0, 1, 0],
  [0, 0.955423, 0.295242],
  [-0.262866, 0.951056, 0.16246],
  [0.238856, 0.864188, 0.442863],
  [0.262866, 0.951056, 0.16246],
  [0.5, 0.809017, 0.309017],
  [0.238856, 0.864188, -0.442863],
  [0.262866, 0.951056, -0.16246],
  [0.5, 0.809017, -0.309017],
  [0.850651, 0.525731, 0],
  [0.716567, 0.681718, 0.147621],
  [0.716567, 0.681718, -0.147621],
  [0.525731, 0.850651, 0],
  [0.425325, 0.688191, 0.587785],
  [0.864188, 0.442863, 0.238856],
  [0.688191, 0.587785, 0.425325],
  [0.809017, 0.309017, 0.5],
  [0.681718, 0.147621, 0.716567],
  [0.587785, 0.425325, 0.688191],
  [0.955423, 0.295242, 0],
  [1, 0, 0],
  [0.951056, 0.16246, 0.262866],
  [0.850651, -0.525731, 0],
  [0.955423, -0.295242, 0],
  [0.864188, -0.442863, 0.238856],
  [0.951056, -0.16246, 0.262866],
  [0.809017, -0.309017, 0.5],
  [0.681718, -0.147621, 0.716567],
  [0.850651, 0, 0.525731],
  [0.864188, 0.442863, -0.238856],
  [0.809017, 0.309017, -0.5],
  [0.951056, 0.16246, -0.262866],
  [0.525731, 0, -0.850651],
  [0.681718, 0.147621, -0.716567],
  [0.681718, -0.147621, -0.716567],
  [0.850651, 0, -0.525731],
  [0.809017, -0.309017, -0.5],
  [0.864188, -0.442863, -0.238856],
  [0.951056, -0.16246, -0.262866],
  [0.147621, 0.716567, -0.681718],
  [0.309017, 0.5, -0.809017],
  [0.425325, 0.688191, -0.587785],
  [0.442863, 0.238856, -0.864188],
  [0.587785, 0.425325, -0.688191],
  [0.688191, 0.587785, -0.425325],
  [-0.147621, 0.716567, -0.681718],
  [-0.309017, 0.5, -0.809017],
  [0, 0.525731, -0.850651],
  [-0.525731, 0, -0.850651],
  [-0.442863, 0.238856, -0.864188],
  [-0.295242, 0, -0.955423],
  [-0.16246, 0.262866, -0.951056],
  [0, 0, -1],
  [0.295242, 0, -0.955423],
  [0.16246, 0.262866, -0.951056],
  [-0.442863, -0.238856, -0.864188],
  [-0.309017, -0.5, -0.809017],
  [-0.16246, -0.262866, -0.951056],
  [0, -0.850651, -0.525731],
  [-0.147621, -0.716567, -0.681718],
  [0.147621, -0.716567, -0.681718],
  [0, -0.525731, -0.850651],
  [0.309017, -0.5, -0.809017],
  [0.442863, -0.238856, -0.864188],
  [0.16246, -0.262866, -0.951056],
  [0.238856, -0.864188, -0.442863],
  [0.5, -0.809017, -0.309017],
  [0.425325, -0.688191, -0.587785],
  [0.716567, -0.681718, -0.147621],
  [0.688191, -0.587785, -0.425325],
  [0.587785, -0.425325, -0.688191],
  [0, -0.955423, -0.295242],
  [0, -1, 0],
  [0.262866, -0.951056, -0.16246],
  [0, -0.850651, 0.525731],
  [0, -0.955423, 0.295242],
  [0.238856, -0.864188, 0.442863],
  [0.262866, -0.951056, 0.16246],
  [0.5, -0.809017, 0.309017],
  [0.716567, -0.681718, 0.147621],
  [0.525731, -0.850651, 0],
  [-0.238856, -0.864188, -0.442863],
  [-0.5, -0.809017, -0.309017],
  [-0.262866, -0.951056, -0.16246],
  [-0.850651, -0.525731, 0],
  [-0.716567, -0.681718, -0.147621],
  [-0.716567, -0.681718, 0.147621],
  [-0.525731, -0.850651, 0],
  [-0.5, -0.809017, 0.309017],
  [-0.238856, -0.864188, 0.442863],
  [-0.262866, -0.951056, 0.16246],
  [-0.864188, -0.442863, 0.238856],
  [-0.809017, -0.309017, 0.5],
  [-0.688191, -0.587785, 0.425325],
  [-0.681718, -0.147621, 0.716567],
  [-0.442863, -0.238856, 0.864188],
  [-0.587785, -0.425325, 0.688191],
  [-0.309017, -0.5, 0.809017],
  [-0.147621, -0.716567, 0.681718],
  [-0.425325, -0.688191, 0.587785],
  [-0.16246, -0.262866, 0.951056],
  [0.442863, -0.238856, 0.864188],
  [0.16246, -0.262866, 0.951056],
  [0.309017, -0.5, 0.809017],
  [0.147621, -0.716567, 0.681718],
  [0, -0.525731, 0.850651],
  [0.425325, -0.688191, 0.587785],
  [0.587785, -0.425325, 0.688191],
  [0.688191, -0.587785, 0.425325],
  [-0.955423, 0.295242, 0],
  [-0.951056, 0.16246, 0.262866],
  [-1, 0, 0],
  [-0.850651, 0, 0.525731],
  [-0.955423, -0.295242, 0],
  [-0.951056, -0.16246, 0.262866],
  [-0.864188, 0.442863, -0.238856],
  [-0.951056, 0.16246, -0.262866],
  [-0.809017, 0.309017, -0.5],
  [-0.864188, -0.442863, -0.238856],
  [-0.951056, -0.16246, -0.262866],
  [-0.809017, -0.309017, -0.5],
  [-0.681718, 0.147621, -0.716567],
  [-0.681718, -0.147621, -0.716567],
  [-0.850651, 0, -0.525731],
  [-0.688191, 0.587785, -0.425325],
  [-0.587785, 0.425325, -0.688191],
  [-0.425325, 0.688191, -0.587785],
  [-0.425325, -0.688191, -0.587785],
  [-0.587785, -0.425325, -0.688191],
  [-0.688191, -0.587785, -0.425325]
];
class S extends q {
  constructor(d) {
    super(d);
  }
  load(d, e, o, v) {
    const r = this, m = new M(r.manager);
    m.setPath(r.path), m.setResponseType("arraybuffer"), m.setRequestHeader(r.requestHeader), m.setWithCredentials(r.withCredentials), m.load(d, function(t) {
      try {
        e(r.parse(t));
      } catch (u) {
        v ? v(u) : console.error(u), r.manager.itemError(d);
      }
    }, o, v);
  }
  parse(d) {
    const e = new DataView(d), o = {}, v = [
      "ident",
      "version",
      "skinwidth",
      "skinheight",
      "framesize",
      "num_skins",
      "num_vertices",
      "num_st",
      "num_tris",
      "num_glcmds",
      "num_frames",
      "offset_skins",
      "offset_st",
      "offset_tris",
      "offset_frames",
      "offset_glcmds",
      "offset_end"
    ];
    for (let s = 0; s < v.length; s++)
      o[v[s]] = e.getInt32(s * 4, !0);
    if (o.ident !== 844121161 || o.version !== 8) {
      console.error("Not a valid MD2 file");
      return;
    }
    if (o.offset_end !== e.byteLength) {
      console.error("Corrupted MD2 file");
      return;
    }
    const r = new N(), m = [];
    let t = o.offset_st;
    for (let s = 0, f = o.num_st; s < f; s++) {
      const i = e.getInt16(t + 0, !0), n = e.getInt16(t + 2, !0);
      m.push(i / o.skinwidth, 1 - n / o.skinheight), t += 4;
    }
    t = o.offset_tris;
    const u = [], z = [];
    for (let s = 0, f = o.num_tris; s < f; s++)
      u.push(
        e.getUint16(t + 0, !0),
        e.getUint16(t + 2, !0),
        e.getUint16(t + 4, !0)
      ), z.push(
        e.getUint16(t + 6, !0),
        e.getUint16(t + 8, !0),
        e.getUint16(t + 10, !0)
      ), t += 12;
    const I = new L(), b = new L(), x = [];
    t = o.offset_frames;
    for (let s = 0, f = o.num_frames; s < f; s++) {
      b.set(
        e.getFloat32(t + 0, !0),
        e.getFloat32(t + 4, !0),
        e.getFloat32(t + 8, !0)
      ), I.set(
        e.getFloat32(t + 12, !0),
        e.getFloat32(t + 16, !0),
        e.getFloat32(t + 20, !0)
      ), t += 24;
      const i = [];
      for (let a = 0; a < 16; a++) {
        const c = e.getUint8(t + a);
        if (c === 0)
          break;
        i[a] = c;
      }
      const n = {
        name: String.fromCharCode.apply(null, i),
        vertices: [],
        normals: []
      };
      t += 16;
      for (let a = 0; a < o.num_vertices; a++) {
        let c = e.getUint8(t++), l = e.getUint8(t++), h = e.getUint8(t++);
        const g = B[e.getUint8(t++)];
        c = c * b.x + I.x, l = l * b.y + I.y, h = h * b.z + I.z, n.vertices.push(c, h, l), n.normals.push(g[0], g[2], g[1]);
      }
      x.push(n);
    }
    const C = [], k = [], j = [], F = x[0].vertices, A = x[0].normals;
    for (let s = 0, f = u.length; s < f; s++) {
      let n = u[s] * 3;
      const a = F[n], c = F[n + 1], l = F[n + 2];
      C.push(a, c, l);
      const h = A[n], g = A[n + 1], p = A[n + 2];
      k.push(h, g, p), n = z[s] * 2;
      const _ = m[n], w = m[n + 1];
      j.push(_, w);
    }
    r.setAttribute("position", new y(C, 3)), r.setAttribute("normal", new y(k, 3)), r.setAttribute("uv", new y(j, 2));
    const T = [], D = [];
    for (let s = 0, f = x.length; s < f; s++) {
      const i = x[s], n = i.name;
      if (i.vertices.length > 0) {
        const a = [];
        for (let l = 0, h = u.length; l < h; l++) {
          const p = u[l] * 3, U = i.vertices[p], _ = i.vertices[p + 1], w = i.vertices[p + 2];
          a.push(U, _, w);
        }
        const c = new y(a, 3);
        c.name = n, T.push(c);
      }
      if (i.normals.length > 0) {
        const a = [];
        for (let l = 0, h = u.length; l < h; l++) {
          const p = u[l] * 3, U = i.normals[p], _ = i.normals[p + 1], w = i.normals[p + 2];
          a.push(U, _, w);
        }
        const c = new y(a, 3);
        c.name = n, D.push(c);
      }
    }
    return r.morphAttributes.position = T, r.morphAttributes.normal = D, r.morphTargetsRelative = !1, r.animations = R.CreateClipsFromMorphTargetSequences(x, 10), r;
  }
}
export {
  S as MD2Loader
};
